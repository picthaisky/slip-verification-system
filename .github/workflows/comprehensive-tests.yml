name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests (.NET)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        run: |
          cd slip-verification-api
          dotnet restore
      
      - name: Build
        run: |
          cd slip-verification-api
          dotnet build --no-restore --configuration Release
      
      - name: Run Unit Tests
        run: |
          cd slip-verification-api
          dotnet test tests/SlipVerification.UnitTests/ \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage
      
      - name: Generate Coverage Report
        run: |
          cd slip-verification-api
          dotnet tool install --global dotnet-reportgenerator-globaltool || true
          reportgenerator \
            -reports:./coverage/**/coverage.cobertura.xml \
            -targetdir:./coverage-report \
            -reporttypes:"Html;Cobertura;JsonSummary"
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./slip-verification-api/coverage-report/Cobertura.xml
          flags: backend-unit
          name: backend-unit-coverage
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-unit-test-results
          path: slip-verification-api/coverage/

  # Backend Integration Tests
  backend-integration-tests:
    name: Backend Integration Tests (.NET)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Run Integration Tests
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=slip_test;Username=postgres;Password=postgres"
          ConnectionStrings__Redis: "localhost:6379"
        run: |
          cd slip-verification-api
          dotnet test tests/SlipVerification.IntegrationTests/ \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage"

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (Angular)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: slip-verification-web/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd slip-verification-web
          npm ci
      
      - name: Run Tests
        run: |
          cd slip-verification-web
          npm test -- --code-coverage --watch=false --browsers=ChromeHeadless
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./slip-verification-web/coverage/cobertura-coverage.xml
          flags: frontend
          name: frontend-coverage
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: slip-verification-web/coverage/

  # Mobile Tests
  mobile-tests:
    name: Mobile Tests (React Native)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: slip-verification-mobile/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd slip-verification-mobile
          npm ci
      
      - name: Run Tests
        run: |
          cd slip-verification-mobile
          npm test -- --coverage --watchAll=false
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./slip-verification-mobile/coverage/cobertura-coverage.xml
          flags: mobile
          name: mobile-coverage

  # OCR Service Tests
  ocr-tests:
    name: OCR Service Tests (Python)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          cd ocr-service
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run Tests
        run: |
          cd ocr-service
          pytest --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./ocr-service/coverage.xml
          flags: ocr
          name: ocr-coverage

  # Performance Tests (Only on schedule or manual trigger)
  performance-tests:
    name: Performance Tests (k6)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run Load Test
        run: |
          k6 run tests/performance/load-test.js \
            --out json=load-test-results.json
        env:
          BASE_URL: ${{ secrets.TEST_API_URL || 'http://localhost:5000/api/v1' }}
      
      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: load-test-results.json

  # Security Tests (Only on schedule or manual trigger)
  security-tests:
    name: Security Tests (OWASP ZAP)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ secrets.TEST_API_URL || 'http://localhost:5000' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-report
          path: |
            report_html.html
            report_json.json

  # Code Quality Analysis
  code-quality:
    name: Code Quality (SonarQube)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-tests, mobile-tests, ocr-tests]
    if: always()
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate Summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- OCR Tests: ${{ needs.ocr-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "View detailed coverage reports in Codecov" >> $GITHUB_STEP_SUMMARY
