name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  OCR_IMAGE_NAME: ${{ github.repository }}/ocr-service

jobs:
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        working-directory: ./slip-verification-api
        run: dotnet restore

      - name: Build
        working-directory: ./slip-verification-api
        run: dotnet build --no-restore --configuration Release

      - name: Test
        working-directory: ./slip-verification-api
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./slip-verification-api/**/coverage.cobertura.xml
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './slip-verification-web/package-lock.json'

      - name: Install dependencies
        working-directory: ./slip-verification-web
        run: npm ci

      - name: Lint
        working-directory: ./slip-verification-web
        run: npm run lint

      - name: Test
        working-directory: ./slip-verification-web
        run: npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./slip-verification-web/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}

  # OCR Service Tests
  test-ocr:
    name: Test OCR Service
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: './ocr-service/requirements.txt'

      - name: Install dependencies
        working-directory: ./ocr-service
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Test
        working-directory: ./ocr-service
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=term || echo "No tests found"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./ocr-service/coverage.xml
          flags: ocr
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-ocr]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - service: backend
            context: ./slip-verification-api
            dockerfile: ./slip-verification-api/Dockerfile
          - service: frontend
            context: ./slip-verification-web
            dockerfile: ./slip-verification-web/Dockerfile
          - service: ocr
            context: ./ocr-service
            dockerfile: ./ocr-service/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:buildcache,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.slipverification.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend-api backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} -n slip-verification-dev
          kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} -n slip-verification-dev
          kubectl set image deployment/ocr-service ocr=${{ env.REGISTRY }}/${{ env.OCR_IMAGE_NAME }}:${{ github.sha }} -n slip-verification-dev

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/backend-api -n slip-verification-dev --timeout=5m
          kubectl rollout status deployment/frontend -n slip-verification-dev --timeout=5m
          kubectl rollout status deployment/ocr-service -n slip-verification-dev --timeout=5m

      - name: Health check
        run: |
          sleep 30
          curl -f https://dev.slipverification.com/health || exit 1

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://slipverification.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/backend-api backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} -n slip-verification
          kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} -n slip-verification
          kubectl set image deployment/ocr-service ocr=${{ env.REGISTRY }}/${{ env.OCR_IMAGE_NAME }}:${{ github.sha }} -n slip-verification

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/backend-api -n slip-verification --timeout=5m
          kubectl rollout status deployment/frontend -n slip-verification --timeout=5m
          kubectl rollout status deployment/ocr-service -n slip-verification --timeout=5m

      - name: Health check
        run: |
          sleep 30
          curl -f https://slipverification.com/health || exit 1

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment to production successful'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/backend-api -n slip-verification
          kubectl rollout undo deployment/frontend -n slip-verification
          kubectl rollout undo deployment/ocr-service -n slip-verification

      - name: Notify on failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment failed and rolled back'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
