version: '3.8'

services:
  # Frontend - Angular Application
  frontend:
    build:
      context: ./slip-verification-web
      dockerfile: Dockerfile
    container_name: slip-frontend-dev
    ports:
      - "4200:80"
    environment:
      - API_URL=http://localhost:5000/api/v1
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - slip-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend - .NET API
  backend:
    build:
      context: ./slip-verification-api
      dockerfile: Dockerfile
    container_name: slip-backend-dev
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=SlipVerificationDb;Username=postgres;Password=postgres123
      - ConnectionStrings__Redis=redis:6379
      - Jwt__Secret=DevSecretKey_ChangeInProduction_32CharactersMinimum
      - Jwt__Issuer=SlipVerificationAPI
      - Jwt__Audience=SlipVerificationClient
      - Jwt__ExpiryMinutes=60
      - FileStorage__BasePath=/app/uploads
      - FileStorage__BaseUrl=http://localhost:5000/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - slip-network
    restart: unless-stopped
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/Logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OCR Service - Python FastAPI
  ocr-service:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: slip-ocr-dev
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=True
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - slip-network
    restart: unless-stopped
    volumes:
      - ocr_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: slip-postgres-dev
    environment:
      POSTGRES_DB: SlipVerificationDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - slip-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: slip-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - slip-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: slip-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - ocr-service
    networks:
      - slip-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin - Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: slip-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@slipverification.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - slip-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  ocr_logs:
    driver: local
  pgadmin_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  slip-network:
    driver: bridge
